*Scheduled Android notifications*

    Some Android OEMs have their own customised Android OS that can prevent applications from running in
    the background. Consequently, scheduled notifications may not work when the application is in the
    background on certain devices (e.g. by Xiaomi, Huawei). If you experience problems like this then
    this would be the reason why. As it's a restriction imposed by the OS, this is not something that
    can be resolved by the plugin. Some devices may have setting that lets users control which
    applications run in the background. The steps for these can vary but it is still up to the users of
    your application to do given it's a setting on the phone itself.

    It has been reported that Samsung's implementation of Android has imposed a maximum of 500 alarms
    that can be scheduled via the Alarm Manager API and exceptions can occur when going over the limit.

*Custom notification sounds*
    iOS and macOS restrictions apply (e.g. supported file formats).

*Notification payload*

    Due to some limitations on iOS with how it treats null values in dictionaries, a null notification
    payload is coalesced to an empty string behind the scenes on all platforms for consistency.

*Custom notification icons and sounds*
    read in the git

!⚠! For Android 8.0+,
    sounds and vibrations are associated with notification channels and can only
    be configured when they are first created. Showing/scheduling a notification will create a channel
    with the specified id if it doesn't exist already. If another notification specifies the same
    channel id but tries to specify another sound or vibration pattern then nothing occurs.


*Full-screen intent notifications*

    If your application needs the ability to schedule full-screen intent notifications, add the
    following attributes to the activity you're opening. For a Flutter application, there is
    typically only one activity extends from FlutterActivity. These attributes ensure the screen
    turns on and shows when the device is locked.

    <activity
        android:showWhenLocked="true"
        android:turnScreenOn="true">

    For reference, the example app's AndroidManifest.xml file can be found here.

    Note that when a full-screen intent notification actually occurs (as opposed to a heads-up
    notification that the system may decide should occur), the plugin will act as though the user
    has tapped on a notification so handle those the same way (e.g. onDidReceiveNotificationResponse
    callback) to display the appropriate page for your application.

!⚠! Release build configuration
    read in the git


